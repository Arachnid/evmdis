package main

import (
	"bytes"
	"encoding/hex"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"

	"github.com/Arachnid/evmdis/disassemble"
)

func main() {

	withSwarmHash := flag.Bool("swarm", true, "solc adds a reference to the Swarm API description to the generated bytecode, if this flag is set it removes this reference before analysis")
	ctorMode := flag.Bool("ctor", false, "Indicates that the provided bytecode has construction(ctor) code included. (needs to be analyzed separately)")
	logging := flag.Bool("log", false, "print logging output")
	binary := flag.Bool("bin", false, "read binary file")

	flag.Parse()

	if !*logging {
		log.SetOutput(ioutil.Discard)
	}

	data, err := ioutil.ReadAll(os.Stdin)
	if err != nil {
		panic(fmt.Sprintf("Could not read from stdin: %v", err))
	}

	var bytecode []byte

	if *binary {
		bytecode = data
	} else {
		data = bytes.TrimSpace(data)

		// disassemble
		bytecode = make([]byte, hex.DecodedLen(len(data)))
		_, err = hex.Decode(bytecode, data)

		if err != nil {
			panic(fmt.Sprintf("Could not decode hex string: %v", err))
		}
	}

	if disassembly, err := disassemble.Disassemble(bytecode, *withSwarmHash, *ctorMode); err != nil {
		panic(fmt.Sprintf("Unable to disassemble: %v", err))
	} else {
		fmt.Println(disassembly)
	}
}
